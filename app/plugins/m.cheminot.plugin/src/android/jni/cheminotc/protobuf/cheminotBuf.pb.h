// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cheminotBuf.proto

#ifndef PROTOBUF_cheminotBuf_2eproto__INCLUDED
#define PROTOBUF_cheminotBuf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace m {
namespace cheminot {
namespace data {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_cheminotBuf_2eproto();
void protobuf_AssignDesc_cheminotBuf_2eproto();
void protobuf_ShutdownFile_cheminotBuf_2eproto();

class Graph;
class Vertice;
class StopTime;
class CalendarDates;
class CalendarExceptions;
class CalendarDate;
class Calendar;
class TripStopIds;

// ===================================================================

class Graph : public ::google::protobuf::Message {
 public:
  Graph();
  virtual ~Graph();

  Graph(const Graph& from);

  inline Graph& operator=(const Graph& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Graph& default_instance();

  void Swap(Graph* other);

  // implements Message ----------------------------------------------

  inline Graph* New() const { return New(NULL); }

  Graph* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Graph& from);
  void MergeFrom(const Graph& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Graph* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .m.cheminot.data.Vertice> vertices = 1;
  int vertices_size() const;
  void clear_vertices();
  static const int kVerticesFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::m::cheminot::data::Vertice >&
      vertices() const;
  ::google::protobuf::Map< ::std::string, ::m::cheminot::data::Vertice >*
      mutable_vertices();

  // @@protoc_insertion_point(class_scope:m.cheminot.data.Graph)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::m::cheminot::data::Vertice,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      Graph_VerticesEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::m::cheminot::data::Vertice,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > vertices_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cheminotBuf_2eproto();
  friend void protobuf_AssignDesc_cheminotBuf_2eproto();
  friend void protobuf_ShutdownFile_cheminotBuf_2eproto();

  void InitAsDefaultInstance();
  static Graph* default_instance_;
};
// -------------------------------------------------------------------

class Vertice : public ::google::protobuf::Message {
 public:
  Vertice();
  virtual ~Vertice();

  Vertice(const Vertice& from);

  inline Vertice& operator=(const Vertice& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vertice& default_instance();

  void Swap(Vertice* other);

  // implements Message ----------------------------------------------

  inline Vertice* New() const { return New(NULL); }

  Vertice* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vertice& from);
  void MergeFrom(const Vertice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Vertice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated string edges = 3;
  int edges_size() const;
  void clear_edges();
  static const int kEdgesFieldNumber = 3;
  const ::std::string& edges(int index) const;
  ::std::string* mutable_edges(int index);
  void set_edges(int index, const ::std::string& value);
  void set_edges(int index, const char* value);
  void set_edges(int index, const char* value, size_t size);
  ::std::string* add_edges();
  void add_edges(const ::std::string& value);
  void add_edges(const char* value);
  void add_edges(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& edges() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_edges();

  // repeated .m.cheminot.data.StopTime stopTimes = 4;
  int stoptimes_size() const;
  void clear_stoptimes();
  static const int kStopTimesFieldNumber = 4;
  const ::m::cheminot::data::StopTime& stoptimes(int index) const;
  ::m::cheminot::data::StopTime* mutable_stoptimes(int index);
  ::m::cheminot::data::StopTime* add_stoptimes();
  const ::google::protobuf::RepeatedPtrField< ::m::cheminot::data::StopTime >&
      stoptimes() const;
  ::google::protobuf::RepeatedPtrField< ::m::cheminot::data::StopTime >*
      mutable_stoptimes();

  // @@protoc_insertion_point(class_scope:m.cheminot.data.Vertice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> edges_;
  ::google::protobuf::RepeatedPtrField< ::m::cheminot::data::StopTime > stoptimes_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cheminotBuf_2eproto();
  friend void protobuf_AssignDesc_cheminotBuf_2eproto();
  friend void protobuf_ShutdownFile_cheminotBuf_2eproto();

  void InitAsDefaultInstance();
  static Vertice* default_instance_;
};
// -------------------------------------------------------------------

class StopTime : public ::google::protobuf::Message {
 public:
  StopTime();
  virtual ~StopTime();

  StopTime(const StopTime& from);

  inline StopTime& operator=(const StopTime& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StopTime& default_instance();

  void Swap(StopTime* other);

  // implements Message ----------------------------------------------

  inline StopTime* New() const { return New(NULL); }

  StopTime* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StopTime& from);
  void MergeFrom(const StopTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StopTime* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tripId = 1;
  void clear_tripid();
  static const int kTripIdFieldNumber = 1;
  const ::std::string& tripid() const;
  void set_tripid(const ::std::string& value);
  void set_tripid(const char* value);
  void set_tripid(const char* value, size_t size);
  ::std::string* mutable_tripid();
  ::std::string* release_tripid();
  void set_allocated_tripid(::std::string* tripid);

  // optional string arrival = 2;
  void clear_arrival();
  static const int kArrivalFieldNumber = 2;
  const ::std::string& arrival() const;
  void set_arrival(const ::std::string& value);
  void set_arrival(const char* value);
  void set_arrival(const char* value, size_t size);
  ::std::string* mutable_arrival();
  ::std::string* release_arrival();
  void set_allocated_arrival(::std::string* arrival);

  // optional string departure = 3;
  void clear_departure();
  static const int kDepartureFieldNumber = 3;
  const ::std::string& departure() const;
  void set_departure(const ::std::string& value);
  void set_departure(const char* value);
  void set_departure(const char* value, size_t size);
  ::std::string* mutable_departure();
  ::std::string* release_departure();
  void set_allocated_departure(::std::string* departure);

  // optional string stopId = 4;
  void clear_stopid();
  static const int kStopIdFieldNumber = 4;
  const ::std::string& stopid() const;
  void set_stopid(const ::std::string& value);
  void set_stopid(const char* value);
  void set_stopid(const char* value, size_t size);
  ::std::string* mutable_stopid();
  ::std::string* release_stopid();
  void set_allocated_stopid(::std::string* stopid);

  // optional int32 pos = 5;
  void clear_pos();
  static const int kPosFieldNumber = 5;
  ::google::protobuf::int32 pos() const;
  void set_pos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:m.cheminot.data.StopTime)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr tripid_;
  ::google::protobuf::internal::ArenaStringPtr arrival_;
  ::google::protobuf::internal::ArenaStringPtr departure_;
  ::google::protobuf::internal::ArenaStringPtr stopid_;
  ::google::protobuf::int32 pos_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cheminotBuf_2eproto();
  friend void protobuf_AssignDesc_cheminotBuf_2eproto();
  friend void protobuf_ShutdownFile_cheminotBuf_2eproto();

  void InitAsDefaultInstance();
  static StopTime* default_instance_;
};
// -------------------------------------------------------------------

class CalendarDates : public ::google::protobuf::Message {
 public:
  CalendarDates();
  virtual ~CalendarDates();

  CalendarDates(const CalendarDates& from);

  inline CalendarDates& operator=(const CalendarDates& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CalendarDates& default_instance();

  void Swap(CalendarDates* other);

  // implements Message ----------------------------------------------

  inline CalendarDates* New() const { return New(NULL); }

  CalendarDates* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CalendarDates& from);
  void MergeFrom(const CalendarDates& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CalendarDates* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .m.cheminot.data.CalendarExceptions> exceptionsByServiceId = 1;
  int exceptionsbyserviceid_size() const;
  void clear_exceptionsbyserviceid();
  static const int kExceptionsByServiceIdFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::m::cheminot::data::CalendarExceptions >&
      exceptionsbyserviceid() const;
  ::google::protobuf::Map< ::std::string, ::m::cheminot::data::CalendarExceptions >*
      mutable_exceptionsbyserviceid();

  // @@protoc_insertion_point(class_scope:m.cheminot.data.CalendarDates)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::m::cheminot::data::CalendarExceptions,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      CalendarDates_ExceptionsByServiceIdEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::m::cheminot::data::CalendarExceptions,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > exceptionsbyserviceid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cheminotBuf_2eproto();
  friend void protobuf_AssignDesc_cheminotBuf_2eproto();
  friend void protobuf_ShutdownFile_cheminotBuf_2eproto();

  void InitAsDefaultInstance();
  static CalendarDates* default_instance_;
};
// -------------------------------------------------------------------

class CalendarExceptions : public ::google::protobuf::Message {
 public:
  CalendarExceptions();
  virtual ~CalendarExceptions();

  CalendarExceptions(const CalendarExceptions& from);

  inline CalendarExceptions& operator=(const CalendarExceptions& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CalendarExceptions& default_instance();

  void Swap(CalendarExceptions* other);

  // implements Message ----------------------------------------------

  inline CalendarExceptions* New() const { return New(NULL); }

  CalendarExceptions* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CalendarExceptions& from);
  void MergeFrom(const CalendarExceptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CalendarExceptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .m.cheminot.data.CalendarDate calendarDates = 1;
  int calendardates_size() const;
  void clear_calendardates();
  static const int kCalendarDatesFieldNumber = 1;
  const ::m::cheminot::data::CalendarDate& calendardates(int index) const;
  ::m::cheminot::data::CalendarDate* mutable_calendardates(int index);
  ::m::cheminot::data::CalendarDate* add_calendardates();
  const ::google::protobuf::RepeatedPtrField< ::m::cheminot::data::CalendarDate >&
      calendardates() const;
  ::google::protobuf::RepeatedPtrField< ::m::cheminot::data::CalendarDate >*
      mutable_calendardates();

  // @@protoc_insertion_point(class_scope:m.cheminot.data.CalendarExceptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::m::cheminot::data::CalendarDate > calendardates_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cheminotBuf_2eproto();
  friend void protobuf_AssignDesc_cheminotBuf_2eproto();
  friend void protobuf_ShutdownFile_cheminotBuf_2eproto();

  void InitAsDefaultInstance();
  static CalendarExceptions* default_instance_;
};
// -------------------------------------------------------------------

class CalendarDate : public ::google::protobuf::Message {
 public:
  CalendarDate();
  virtual ~CalendarDate();

  CalendarDate(const CalendarDate& from);

  inline CalendarDate& operator=(const CalendarDate& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CalendarDate& default_instance();

  void Swap(CalendarDate* other);

  // implements Message ----------------------------------------------

  inline CalendarDate* New() const { return New(NULL); }

  CalendarDate* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CalendarDate& from);
  void MergeFrom(const CalendarDate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CalendarDate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string serviceId = 1;
  void clear_serviceid();
  static const int kServiceIdFieldNumber = 1;
  const ::std::string& serviceid() const;
  void set_serviceid(const ::std::string& value);
  void set_serviceid(const char* value);
  void set_serviceid(const char* value, size_t size);
  ::std::string* mutable_serviceid();
  ::std::string* release_serviceid();
  void set_allocated_serviceid(::std::string* serviceid);

  // optional string date = 2;
  void clear_date();
  static const int kDateFieldNumber = 2;
  const ::std::string& date() const;
  void set_date(const ::std::string& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  ::std::string* mutable_date();
  ::std::string* release_date();
  void set_allocated_date(::std::string* date);

  // optional int32 exceptionType = 3;
  void clear_exceptiontype();
  static const int kExceptionTypeFieldNumber = 3;
  ::google::protobuf::int32 exceptiontype() const;
  void set_exceptiontype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:m.cheminot.data.CalendarDate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr serviceid_;
  ::google::protobuf::internal::ArenaStringPtr date_;
  ::google::protobuf::int32 exceptiontype_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cheminotBuf_2eproto();
  friend void protobuf_AssignDesc_cheminotBuf_2eproto();
  friend void protobuf_ShutdownFile_cheminotBuf_2eproto();

  void InitAsDefaultInstance();
  static CalendarDate* default_instance_;
};
// -------------------------------------------------------------------

class Calendar : public ::google::protobuf::Message {
 public:
  Calendar();
  virtual ~Calendar();

  Calendar(const Calendar& from);

  inline Calendar& operator=(const Calendar& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Calendar& default_instance();

  void Swap(Calendar* other);

  // implements Message ----------------------------------------------

  inline Calendar* New() const { return New(NULL); }

  Calendar* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Calendar& from);
  void MergeFrom(const Calendar& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Calendar* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string serviceId = 1;
  void clear_serviceid();
  static const int kServiceIdFieldNumber = 1;
  const ::std::string& serviceid() const;
  void set_serviceid(const ::std::string& value);
  void set_serviceid(const char* value);
  void set_serviceid(const char* value, size_t size);
  ::std::string* mutable_serviceid();
  ::std::string* release_serviceid();
  void set_allocated_serviceid(::std::string* serviceid);

  // optional string monday = 2;
  void clear_monday();
  static const int kMondayFieldNumber = 2;
  const ::std::string& monday() const;
  void set_monday(const ::std::string& value);
  void set_monday(const char* value);
  void set_monday(const char* value, size_t size);
  ::std::string* mutable_monday();
  ::std::string* release_monday();
  void set_allocated_monday(::std::string* monday);

  // optional string tuesday = 3;
  void clear_tuesday();
  static const int kTuesdayFieldNumber = 3;
  const ::std::string& tuesday() const;
  void set_tuesday(const ::std::string& value);
  void set_tuesday(const char* value);
  void set_tuesday(const char* value, size_t size);
  ::std::string* mutable_tuesday();
  ::std::string* release_tuesday();
  void set_allocated_tuesday(::std::string* tuesday);

  // optional string wednesday = 4;
  void clear_wednesday();
  static const int kWednesdayFieldNumber = 4;
  const ::std::string& wednesday() const;
  void set_wednesday(const ::std::string& value);
  void set_wednesday(const char* value);
  void set_wednesday(const char* value, size_t size);
  ::std::string* mutable_wednesday();
  ::std::string* release_wednesday();
  void set_allocated_wednesday(::std::string* wednesday);

  // optional string thursday = 5;
  void clear_thursday();
  static const int kThursdayFieldNumber = 5;
  const ::std::string& thursday() const;
  void set_thursday(const ::std::string& value);
  void set_thursday(const char* value);
  void set_thursday(const char* value, size_t size);
  ::std::string* mutable_thursday();
  ::std::string* release_thursday();
  void set_allocated_thursday(::std::string* thursday);

  // optional string friday = 6;
  void clear_friday();
  static const int kFridayFieldNumber = 6;
  const ::std::string& friday() const;
  void set_friday(const ::std::string& value);
  void set_friday(const char* value);
  void set_friday(const char* value, size_t size);
  ::std::string* mutable_friday();
  ::std::string* release_friday();
  void set_allocated_friday(::std::string* friday);

  // optional string saturday = 7;
  void clear_saturday();
  static const int kSaturdayFieldNumber = 7;
  const ::std::string& saturday() const;
  void set_saturday(const ::std::string& value);
  void set_saturday(const char* value);
  void set_saturday(const char* value, size_t size);
  ::std::string* mutable_saturday();
  ::std::string* release_saturday();
  void set_allocated_saturday(::std::string* saturday);

  // optional string sunday = 8;
  void clear_sunday();
  static const int kSundayFieldNumber = 8;
  const ::std::string& sunday() const;
  void set_sunday(const ::std::string& value);
  void set_sunday(const char* value);
  void set_sunday(const char* value, size_t size);
  ::std::string* mutable_sunday();
  ::std::string* release_sunday();
  void set_allocated_sunday(::std::string* sunday);

  // optional string startDate = 9;
  void clear_startdate();
  static const int kStartDateFieldNumber = 9;
  const ::std::string& startdate() const;
  void set_startdate(const ::std::string& value);
  void set_startdate(const char* value);
  void set_startdate(const char* value, size_t size);
  ::std::string* mutable_startdate();
  ::std::string* release_startdate();
  void set_allocated_startdate(::std::string* startdate);

  // optional string endDate = 10;
  void clear_enddate();
  static const int kEndDateFieldNumber = 10;
  const ::std::string& enddate() const;
  void set_enddate(const ::std::string& value);
  void set_enddate(const char* value);
  void set_enddate(const char* value, size_t size);
  ::std::string* mutable_enddate();
  ::std::string* release_enddate();
  void set_allocated_enddate(::std::string* enddate);

  // @@protoc_insertion_point(class_scope:m.cheminot.data.Calendar)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr serviceid_;
  ::google::protobuf::internal::ArenaStringPtr monday_;
  ::google::protobuf::internal::ArenaStringPtr tuesday_;
  ::google::protobuf::internal::ArenaStringPtr wednesday_;
  ::google::protobuf::internal::ArenaStringPtr thursday_;
  ::google::protobuf::internal::ArenaStringPtr friday_;
  ::google::protobuf::internal::ArenaStringPtr saturday_;
  ::google::protobuf::internal::ArenaStringPtr sunday_;
  ::google::protobuf::internal::ArenaStringPtr startdate_;
  ::google::protobuf::internal::ArenaStringPtr enddate_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cheminotBuf_2eproto();
  friend void protobuf_AssignDesc_cheminotBuf_2eproto();
  friend void protobuf_ShutdownFile_cheminotBuf_2eproto();

  void InitAsDefaultInstance();
  static Calendar* default_instance_;
};
// -------------------------------------------------------------------

class TripStopIds : public ::google::protobuf::Message {
 public:
  TripStopIds();
  virtual ~TripStopIds();

  TripStopIds(const TripStopIds& from);

  inline TripStopIds& operator=(const TripStopIds& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TripStopIds& default_instance();

  void Swap(TripStopIds* other);

  // implements Message ----------------------------------------------

  inline TripStopIds* New() const { return New(NULL); }

  TripStopIds* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TripStopIds& from);
  void MergeFrom(const TripStopIds& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TripStopIds* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string stopIds = 1;
  int stopids_size() const;
  void clear_stopids();
  static const int kStopIdsFieldNumber = 1;
  const ::std::string& stopids(int index) const;
  ::std::string* mutable_stopids(int index);
  void set_stopids(int index, const ::std::string& value);
  void set_stopids(int index, const char* value);
  void set_stopids(int index, const char* value, size_t size);
  ::std::string* add_stopids();
  void add_stopids(const ::std::string& value);
  void add_stopids(const char* value);
  void add_stopids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& stopids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stopids();

  // @@protoc_insertion_point(class_scope:m.cheminot.data.TripStopIds)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stopids_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cheminotBuf_2eproto();
  friend void protobuf_AssignDesc_cheminotBuf_2eproto();
  friend void protobuf_ShutdownFile_cheminotBuf_2eproto();

  void InitAsDefaultInstance();
  static TripStopIds* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Graph

// map<string, .m.cheminot.data.Vertice> vertices = 1;
inline int Graph::vertices_size() const {
  return vertices_.size();
}
inline void Graph::clear_vertices() {
  vertices_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::m::cheminot::data::Vertice >&
Graph::vertices() const {
  // @@protoc_insertion_point(field_map:m.cheminot.data.Graph.vertices)
  return vertices_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::m::cheminot::data::Vertice >*
Graph::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_map:m.cheminot.data.Graph.vertices)
  return vertices_.MutableMap();
}

// -------------------------------------------------------------------

// Vertice

// optional string id = 1;
inline void Vertice::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Vertice::id() const {
  // @@protoc_insertion_point(field_get:m.cheminot.data.Vertice.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vertice::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:m.cheminot.data.Vertice.id)
}
inline void Vertice::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:m.cheminot.data.Vertice.id)
}
inline void Vertice::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:m.cheminot.data.Vertice.id)
}
inline ::std::string* Vertice::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:m.cheminot.data.Vertice.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Vertice::release_id() {
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vertice::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:m.cheminot.data.Vertice.id)
}

// optional string name = 2;
inline void Vertice::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Vertice::name() const {
  // @@protoc_insertion_point(field_get:m.cheminot.data.Vertice.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vertice::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:m.cheminot.data.Vertice.name)
}
inline void Vertice::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:m.cheminot.data.Vertice.name)
}
inline void Vertice::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:m.cheminot.data.Vertice.name)
}
inline ::std::string* Vertice::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:m.cheminot.data.Vertice.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Vertice::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vertice::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:m.cheminot.data.Vertice.name)
}

// repeated string edges = 3;
inline int Vertice::edges_size() const {
  return edges_.size();
}
inline void Vertice::clear_edges() {
  edges_.Clear();
}
inline const ::std::string& Vertice::edges(int index) const {
  // @@protoc_insertion_point(field_get:m.cheminot.data.Vertice.edges)
  return edges_.Get(index);
}
inline ::std::string* Vertice::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:m.cheminot.data.Vertice.edges)
  return edges_.Mutable(index);
}
inline void Vertice::set_edges(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:m.cheminot.data.Vertice.edges)
  edges_.Mutable(index)->assign(value);
}
inline void Vertice::set_edges(int index, const char* value) {
  edges_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:m.cheminot.data.Vertice.edges)
}
inline void Vertice::set_edges(int index, const char* value, size_t size) {
  edges_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:m.cheminot.data.Vertice.edges)
}
inline ::std::string* Vertice::add_edges() {
  return edges_.Add();
}
inline void Vertice::add_edges(const ::std::string& value) {
  edges_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:m.cheminot.data.Vertice.edges)
}
inline void Vertice::add_edges(const char* value) {
  edges_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:m.cheminot.data.Vertice.edges)
}
inline void Vertice::add_edges(const char* value, size_t size) {
  edges_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:m.cheminot.data.Vertice.edges)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Vertice::edges() const {
  // @@protoc_insertion_point(field_list:m.cheminot.data.Vertice.edges)
  return edges_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Vertice::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:m.cheminot.data.Vertice.edges)
  return &edges_;
}

// repeated .m.cheminot.data.StopTime stopTimes = 4;
inline int Vertice::stoptimes_size() const {
  return stoptimes_.size();
}
inline void Vertice::clear_stoptimes() {
  stoptimes_.Clear();
}
inline const ::m::cheminot::data::StopTime& Vertice::stoptimes(int index) const {
  // @@protoc_insertion_point(field_get:m.cheminot.data.Vertice.stopTimes)
  return stoptimes_.Get(index);
}
inline ::m::cheminot::data::StopTime* Vertice::mutable_stoptimes(int index) {
  // @@protoc_insertion_point(field_mutable:m.cheminot.data.Vertice.stopTimes)
  return stoptimes_.Mutable(index);
}
inline ::m::cheminot::data::StopTime* Vertice::add_stoptimes() {
  // @@protoc_insertion_point(field_add:m.cheminot.data.Vertice.stopTimes)
  return stoptimes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::m::cheminot::data::StopTime >&
Vertice::stoptimes() const {
  // @@protoc_insertion_point(field_list:m.cheminot.data.Vertice.stopTimes)
  return stoptimes_;
}
inline ::google::protobuf::RepeatedPtrField< ::m::cheminot::data::StopTime >*
Vertice::mutable_stoptimes() {
  // @@protoc_insertion_point(field_mutable_list:m.cheminot.data.Vertice.stopTimes)
  return &stoptimes_;
}

// -------------------------------------------------------------------

// StopTime

// optional string tripId = 1;
inline void StopTime::clear_tripid() {
  tripid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StopTime::tripid() const {
  // @@protoc_insertion_point(field_get:m.cheminot.data.StopTime.tripId)
  return tripid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopTime::set_tripid(const ::std::string& value) {
  
  tripid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:m.cheminot.data.StopTime.tripId)
}
inline void StopTime::set_tripid(const char* value) {
  
  tripid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:m.cheminot.data.StopTime.tripId)
}
inline void StopTime::set_tripid(const char* value, size_t size) {
  
  tripid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:m.cheminot.data.StopTime.tripId)
}
inline ::std::string* StopTime::mutable_tripid() {
  
  // @@protoc_insertion_point(field_mutable:m.cheminot.data.StopTime.tripId)
  return tripid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StopTime::release_tripid() {
  
  return tripid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopTime::set_allocated_tripid(::std::string* tripid) {
  if (tripid != NULL) {
    
  } else {
    
  }
  tripid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tripid);
  // @@protoc_insertion_point(field_set_allocated:m.cheminot.data.StopTime.tripId)
}

// optional string arrival = 2;
inline void StopTime::clear_arrival() {
  arrival_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StopTime::arrival() const {
  // @@protoc_insertion_point(field_get:m.cheminot.data.StopTime.arrival)
  return arrival_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopTime::set_arrival(const ::std::string& value) {
  
  arrival_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:m.cheminot.data.StopTime.arrival)
}
inline void StopTime::set_arrival(const char* value) {
  
  arrival_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:m.cheminot.data.StopTime.arrival)
}
inline void StopTime::set_arrival(const char* value, size_t size) {
  
  arrival_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:m.cheminot.data.StopTime.arrival)
}
inline ::std::string* StopTime::mutable_arrival() {
  
  // @@protoc_insertion_point(field_mutable:m.cheminot.data.StopTime.arrival)
  return arrival_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StopTime::release_arrival() {
  
  return arrival_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopTime::set_allocated_arrival(::std::string* arrival) {
  if (arrival != NULL) {
    
  } else {
    
  }
  arrival_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arrival);
  // @@protoc_insertion_point(field_set_allocated:m.cheminot.data.StopTime.arrival)
}

// optional string departure = 3;
inline void StopTime::clear_departure() {
  departure_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StopTime::departure() const {
  // @@protoc_insertion_point(field_get:m.cheminot.data.StopTime.departure)
  return departure_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopTime::set_departure(const ::std::string& value) {
  
  departure_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:m.cheminot.data.StopTime.departure)
}
inline void StopTime::set_departure(const char* value) {
  
  departure_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:m.cheminot.data.StopTime.departure)
}
inline void StopTime::set_departure(const char* value, size_t size) {
  
  departure_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:m.cheminot.data.StopTime.departure)
}
inline ::std::string* StopTime::mutable_departure() {
  
  // @@protoc_insertion_point(field_mutable:m.cheminot.data.StopTime.departure)
  return departure_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StopTime::release_departure() {
  
  return departure_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopTime::set_allocated_departure(::std::string* departure) {
  if (departure != NULL) {
    
  } else {
    
  }
  departure_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), departure);
  // @@protoc_insertion_point(field_set_allocated:m.cheminot.data.StopTime.departure)
}

// optional string stopId = 4;
inline void StopTime::clear_stopid() {
  stopid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StopTime::stopid() const {
  // @@protoc_insertion_point(field_get:m.cheminot.data.StopTime.stopId)
  return stopid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopTime::set_stopid(const ::std::string& value) {
  
  stopid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:m.cheminot.data.StopTime.stopId)
}
inline void StopTime::set_stopid(const char* value) {
  
  stopid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:m.cheminot.data.StopTime.stopId)
}
inline void StopTime::set_stopid(const char* value, size_t size) {
  
  stopid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:m.cheminot.data.StopTime.stopId)
}
inline ::std::string* StopTime::mutable_stopid() {
  
  // @@protoc_insertion_point(field_mutable:m.cheminot.data.StopTime.stopId)
  return stopid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StopTime::release_stopid() {
  
  return stopid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopTime::set_allocated_stopid(::std::string* stopid) {
  if (stopid != NULL) {
    
  } else {
    
  }
  stopid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stopid);
  // @@protoc_insertion_point(field_set_allocated:m.cheminot.data.StopTime.stopId)
}

// optional int32 pos = 5;
inline void StopTime::clear_pos() {
  pos_ = 0;
}
inline ::google::protobuf::int32 StopTime::pos() const {
  // @@protoc_insertion_point(field_get:m.cheminot.data.StopTime.pos)
  return pos_;
}
inline void StopTime::set_pos(::google::protobuf::int32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:m.cheminot.data.StopTime.pos)
}

// -------------------------------------------------------------------

// CalendarDates

// map<string, .m.cheminot.data.CalendarExceptions> exceptionsByServiceId = 1;
inline int CalendarDates::exceptionsbyserviceid_size() const {
  return exceptionsbyserviceid_.size();
}
inline void CalendarDates::clear_exceptionsbyserviceid() {
  exceptionsbyserviceid_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::m::cheminot::data::CalendarExceptions >&
CalendarDates::exceptionsbyserviceid() const {
  // @@protoc_insertion_point(field_map:m.cheminot.data.CalendarDates.exceptionsByServiceId)
  return exceptionsbyserviceid_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::m::cheminot::data::CalendarExceptions >*
CalendarDates::mutable_exceptionsbyserviceid() {
  // @@protoc_insertion_point(field_mutable_map:m.cheminot.data.CalendarDates.exceptionsByServiceId)
  return exceptionsbyserviceid_.MutableMap();
}

// -------------------------------------------------------------------

// CalendarExceptions

// repeated .m.cheminot.data.CalendarDate calendarDates = 1;
inline int CalendarExceptions::calendardates_size() const {
  return calendardates_.size();
}
inline void CalendarExceptions::clear_calendardates() {
  calendardates_.Clear();
}
inline const ::m::cheminot::data::CalendarDate& CalendarExceptions::calendardates(int index) const {
  // @@protoc_insertion_point(field_get:m.cheminot.data.CalendarExceptions.calendarDates)
  return calendardates_.Get(index);
}
inline ::m::cheminot::data::CalendarDate* CalendarExceptions::mutable_calendardates(int index) {
  // @@protoc_insertion_point(field_mutable:m.cheminot.data.CalendarExceptions.calendarDates)
  return calendardates_.Mutable(index);
}
inline ::m::cheminot::data::CalendarDate* CalendarExceptions::add_calendardates() {
  // @@protoc_insertion_point(field_add:m.cheminot.data.CalendarExceptions.calendarDates)
  return calendardates_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::m::cheminot::data::CalendarDate >&
CalendarExceptions::calendardates() const {
  // @@protoc_insertion_point(field_list:m.cheminot.data.CalendarExceptions.calendarDates)
  return calendardates_;
}
inline ::google::protobuf::RepeatedPtrField< ::m::cheminot::data::CalendarDate >*
CalendarExceptions::mutable_calendardates() {
  // @@protoc_insertion_point(field_mutable_list:m.cheminot.data.CalendarExceptions.calendarDates)
  return &calendardates_;
}

// -------------------------------------------------------------------

// CalendarDate

// optional string serviceId = 1;
inline void CalendarDate::clear_serviceid() {
  serviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CalendarDate::serviceid() const {
  // @@protoc_insertion_point(field_get:m.cheminot.data.CalendarDate.serviceId)
  return serviceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalendarDate::set_serviceid(const ::std::string& value) {
  
  serviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:m.cheminot.data.CalendarDate.serviceId)
}
inline void CalendarDate::set_serviceid(const char* value) {
  
  serviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:m.cheminot.data.CalendarDate.serviceId)
}
inline void CalendarDate::set_serviceid(const char* value, size_t size) {
  
  serviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:m.cheminot.data.CalendarDate.serviceId)
}
inline ::std::string* CalendarDate::mutable_serviceid() {
  
  // @@protoc_insertion_point(field_mutable:m.cheminot.data.CalendarDate.serviceId)
  return serviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CalendarDate::release_serviceid() {
  
  return serviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalendarDate::set_allocated_serviceid(::std::string* serviceid) {
  if (serviceid != NULL) {
    
  } else {
    
  }
  serviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serviceid);
  // @@protoc_insertion_point(field_set_allocated:m.cheminot.data.CalendarDate.serviceId)
}

// optional string date = 2;
inline void CalendarDate::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CalendarDate::date() const {
  // @@protoc_insertion_point(field_get:m.cheminot.data.CalendarDate.date)
  return date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalendarDate::set_date(const ::std::string& value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:m.cheminot.data.CalendarDate.date)
}
inline void CalendarDate::set_date(const char* value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:m.cheminot.data.CalendarDate.date)
}
inline void CalendarDate::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:m.cheminot.data.CalendarDate.date)
}
inline ::std::string* CalendarDate::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:m.cheminot.data.CalendarDate.date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CalendarDate::release_date() {
  
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalendarDate::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:m.cheminot.data.CalendarDate.date)
}

// optional int32 exceptionType = 3;
inline void CalendarDate::clear_exceptiontype() {
  exceptiontype_ = 0;
}
inline ::google::protobuf::int32 CalendarDate::exceptiontype() const {
  // @@protoc_insertion_point(field_get:m.cheminot.data.CalendarDate.exceptionType)
  return exceptiontype_;
}
inline void CalendarDate::set_exceptiontype(::google::protobuf::int32 value) {
  
  exceptiontype_ = value;
  // @@protoc_insertion_point(field_set:m.cheminot.data.CalendarDate.exceptionType)
}

// -------------------------------------------------------------------

// Calendar

// optional string serviceId = 1;
inline void Calendar::clear_serviceid() {
  serviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Calendar::serviceid() const {
  // @@protoc_insertion_point(field_get:m.cheminot.data.Calendar.serviceId)
  return serviceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Calendar::set_serviceid(const ::std::string& value) {
  
  serviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:m.cheminot.data.Calendar.serviceId)
}
inline void Calendar::set_serviceid(const char* value) {
  
  serviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:m.cheminot.data.Calendar.serviceId)
}
inline void Calendar::set_serviceid(const char* value, size_t size) {
  
  serviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:m.cheminot.data.Calendar.serviceId)
}
inline ::std::string* Calendar::mutable_serviceid() {
  
  // @@protoc_insertion_point(field_mutable:m.cheminot.data.Calendar.serviceId)
  return serviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Calendar::release_serviceid() {
  
  return serviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Calendar::set_allocated_serviceid(::std::string* serviceid) {
  if (serviceid != NULL) {
    
  } else {
    
  }
  serviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serviceid);
  // @@protoc_insertion_point(field_set_allocated:m.cheminot.data.Calendar.serviceId)
}

// optional string monday = 2;
inline void Calendar::clear_monday() {
  monday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Calendar::monday() const {
  // @@protoc_insertion_point(field_get:m.cheminot.data.Calendar.monday)
  return monday_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Calendar::set_monday(const ::std::string& value) {
  
  monday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:m.cheminot.data.Calendar.monday)
}
inline void Calendar::set_monday(const char* value) {
  
  monday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:m.cheminot.data.Calendar.monday)
}
inline void Calendar::set_monday(const char* value, size_t size) {
  
  monday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:m.cheminot.data.Calendar.monday)
}
inline ::std::string* Calendar::mutable_monday() {
  
  // @@protoc_insertion_point(field_mutable:m.cheminot.data.Calendar.monday)
  return monday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Calendar::release_monday() {
  
  return monday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Calendar::set_allocated_monday(::std::string* monday) {
  if (monday != NULL) {
    
  } else {
    
  }
  monday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), monday);
  // @@protoc_insertion_point(field_set_allocated:m.cheminot.data.Calendar.monday)
}

// optional string tuesday = 3;
inline void Calendar::clear_tuesday() {
  tuesday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Calendar::tuesday() const {
  // @@protoc_insertion_point(field_get:m.cheminot.data.Calendar.tuesday)
  return tuesday_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Calendar::set_tuesday(const ::std::string& value) {
  
  tuesday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:m.cheminot.data.Calendar.tuesday)
}
inline void Calendar::set_tuesday(const char* value) {
  
  tuesday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:m.cheminot.data.Calendar.tuesday)
}
inline void Calendar::set_tuesday(const char* value, size_t size) {
  
  tuesday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:m.cheminot.data.Calendar.tuesday)
}
inline ::std::string* Calendar::mutable_tuesday() {
  
  // @@protoc_insertion_point(field_mutable:m.cheminot.data.Calendar.tuesday)
  return tuesday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Calendar::release_tuesday() {
  
  return tuesday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Calendar::set_allocated_tuesday(::std::string* tuesday) {
  if (tuesday != NULL) {
    
  } else {
    
  }
  tuesday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tuesday);
  // @@protoc_insertion_point(field_set_allocated:m.cheminot.data.Calendar.tuesday)
}

// optional string wednesday = 4;
inline void Calendar::clear_wednesday() {
  wednesday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Calendar::wednesday() const {
  // @@protoc_insertion_point(field_get:m.cheminot.data.Calendar.wednesday)
  return wednesday_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Calendar::set_wednesday(const ::std::string& value) {
  
  wednesday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:m.cheminot.data.Calendar.wednesday)
}
inline void Calendar::set_wednesday(const char* value) {
  
  wednesday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:m.cheminot.data.Calendar.wednesday)
}
inline void Calendar::set_wednesday(const char* value, size_t size) {
  
  wednesday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:m.cheminot.data.Calendar.wednesday)
}
inline ::std::string* Calendar::mutable_wednesday() {
  
  // @@protoc_insertion_point(field_mutable:m.cheminot.data.Calendar.wednesday)
  return wednesday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Calendar::release_wednesday() {
  
  return wednesday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Calendar::set_allocated_wednesday(::std::string* wednesday) {
  if (wednesday != NULL) {
    
  } else {
    
  }
  wednesday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wednesday);
  // @@protoc_insertion_point(field_set_allocated:m.cheminot.data.Calendar.wednesday)
}

// optional string thursday = 5;
inline void Calendar::clear_thursday() {
  thursday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Calendar::thursday() const {
  // @@protoc_insertion_point(field_get:m.cheminot.data.Calendar.thursday)
  return thursday_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Calendar::set_thursday(const ::std::string& value) {
  
  thursday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:m.cheminot.data.Calendar.thursday)
}
inline void Calendar::set_thursday(const char* value) {
  
  thursday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:m.cheminot.data.Calendar.thursday)
}
inline void Calendar::set_thursday(const char* value, size_t size) {
  
  thursday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:m.cheminot.data.Calendar.thursday)
}
inline ::std::string* Calendar::mutable_thursday() {
  
  // @@protoc_insertion_point(field_mutable:m.cheminot.data.Calendar.thursday)
  return thursday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Calendar::release_thursday() {
  
  return thursday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Calendar::set_allocated_thursday(::std::string* thursday) {
  if (thursday != NULL) {
    
  } else {
    
  }
  thursday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thursday);
  // @@protoc_insertion_point(field_set_allocated:m.cheminot.data.Calendar.thursday)
}

// optional string friday = 6;
inline void Calendar::clear_friday() {
  friday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Calendar::friday() const {
  // @@protoc_insertion_point(field_get:m.cheminot.data.Calendar.friday)
  return friday_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Calendar::set_friday(const ::std::string& value) {
  
  friday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:m.cheminot.data.Calendar.friday)
}
inline void Calendar::set_friday(const char* value) {
  
  friday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:m.cheminot.data.Calendar.friday)
}
inline void Calendar::set_friday(const char* value, size_t size) {
  
  friday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:m.cheminot.data.Calendar.friday)
}
inline ::std::string* Calendar::mutable_friday() {
  
  // @@protoc_insertion_point(field_mutable:m.cheminot.data.Calendar.friday)
  return friday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Calendar::release_friday() {
  
  return friday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Calendar::set_allocated_friday(::std::string* friday) {
  if (friday != NULL) {
    
  } else {
    
  }
  friday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friday);
  // @@protoc_insertion_point(field_set_allocated:m.cheminot.data.Calendar.friday)
}

// optional string saturday = 7;
inline void Calendar::clear_saturday() {
  saturday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Calendar::saturday() const {
  // @@protoc_insertion_point(field_get:m.cheminot.data.Calendar.saturday)
  return saturday_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Calendar::set_saturday(const ::std::string& value) {
  
  saturday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:m.cheminot.data.Calendar.saturday)
}
inline void Calendar::set_saturday(const char* value) {
  
  saturday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:m.cheminot.data.Calendar.saturday)
}
inline void Calendar::set_saturday(const char* value, size_t size) {
  
  saturday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:m.cheminot.data.Calendar.saturday)
}
inline ::std::string* Calendar::mutable_saturday() {
  
  // @@protoc_insertion_point(field_mutable:m.cheminot.data.Calendar.saturday)
  return saturday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Calendar::release_saturday() {
  
  return saturday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Calendar::set_allocated_saturday(::std::string* saturday) {
  if (saturday != NULL) {
    
  } else {
    
  }
  saturday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), saturday);
  // @@protoc_insertion_point(field_set_allocated:m.cheminot.data.Calendar.saturday)
}

// optional string sunday = 8;
inline void Calendar::clear_sunday() {
  sunday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Calendar::sunday() const {
  // @@protoc_insertion_point(field_get:m.cheminot.data.Calendar.sunday)
  return sunday_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Calendar::set_sunday(const ::std::string& value) {
  
  sunday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:m.cheminot.data.Calendar.sunday)
}
inline void Calendar::set_sunday(const char* value) {
  
  sunday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:m.cheminot.data.Calendar.sunday)
}
inline void Calendar::set_sunday(const char* value, size_t size) {
  
  sunday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:m.cheminot.data.Calendar.sunday)
}
inline ::std::string* Calendar::mutable_sunday() {
  
  // @@protoc_insertion_point(field_mutable:m.cheminot.data.Calendar.sunday)
  return sunday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Calendar::release_sunday() {
  
  return sunday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Calendar::set_allocated_sunday(::std::string* sunday) {
  if (sunday != NULL) {
    
  } else {
    
  }
  sunday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sunday);
  // @@protoc_insertion_point(field_set_allocated:m.cheminot.data.Calendar.sunday)
}

// optional string startDate = 9;
inline void Calendar::clear_startdate() {
  startdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Calendar::startdate() const {
  // @@protoc_insertion_point(field_get:m.cheminot.data.Calendar.startDate)
  return startdate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Calendar::set_startdate(const ::std::string& value) {
  
  startdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:m.cheminot.data.Calendar.startDate)
}
inline void Calendar::set_startdate(const char* value) {
  
  startdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:m.cheminot.data.Calendar.startDate)
}
inline void Calendar::set_startdate(const char* value, size_t size) {
  
  startdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:m.cheminot.data.Calendar.startDate)
}
inline ::std::string* Calendar::mutable_startdate() {
  
  // @@protoc_insertion_point(field_mutable:m.cheminot.data.Calendar.startDate)
  return startdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Calendar::release_startdate() {
  
  return startdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Calendar::set_allocated_startdate(::std::string* startdate) {
  if (startdate != NULL) {
    
  } else {
    
  }
  startdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), startdate);
  // @@protoc_insertion_point(field_set_allocated:m.cheminot.data.Calendar.startDate)
}

// optional string endDate = 10;
inline void Calendar::clear_enddate() {
  enddate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Calendar::enddate() const {
  // @@protoc_insertion_point(field_get:m.cheminot.data.Calendar.endDate)
  return enddate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Calendar::set_enddate(const ::std::string& value) {
  
  enddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:m.cheminot.data.Calendar.endDate)
}
inline void Calendar::set_enddate(const char* value) {
  
  enddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:m.cheminot.data.Calendar.endDate)
}
inline void Calendar::set_enddate(const char* value, size_t size) {
  
  enddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:m.cheminot.data.Calendar.endDate)
}
inline ::std::string* Calendar::mutable_enddate() {
  
  // @@protoc_insertion_point(field_mutable:m.cheminot.data.Calendar.endDate)
  return enddate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Calendar::release_enddate() {
  
  return enddate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Calendar::set_allocated_enddate(::std::string* enddate) {
  if (enddate != NULL) {
    
  } else {
    
  }
  enddate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enddate);
  // @@protoc_insertion_point(field_set_allocated:m.cheminot.data.Calendar.endDate)
}

// -------------------------------------------------------------------

// TripStopIds

// repeated string stopIds = 1;
inline int TripStopIds::stopids_size() const {
  return stopids_.size();
}
inline void TripStopIds::clear_stopids() {
  stopids_.Clear();
}
inline const ::std::string& TripStopIds::stopids(int index) const {
  // @@protoc_insertion_point(field_get:m.cheminot.data.TripStopIds.stopIds)
  return stopids_.Get(index);
}
inline ::std::string* TripStopIds::mutable_stopids(int index) {
  // @@protoc_insertion_point(field_mutable:m.cheminot.data.TripStopIds.stopIds)
  return stopids_.Mutable(index);
}
inline void TripStopIds::set_stopids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:m.cheminot.data.TripStopIds.stopIds)
  stopids_.Mutable(index)->assign(value);
}
inline void TripStopIds::set_stopids(int index, const char* value) {
  stopids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:m.cheminot.data.TripStopIds.stopIds)
}
inline void TripStopIds::set_stopids(int index, const char* value, size_t size) {
  stopids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:m.cheminot.data.TripStopIds.stopIds)
}
inline ::std::string* TripStopIds::add_stopids() {
  return stopids_.Add();
}
inline void TripStopIds::add_stopids(const ::std::string& value) {
  stopids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:m.cheminot.data.TripStopIds.stopIds)
}
inline void TripStopIds::add_stopids(const char* value) {
  stopids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:m.cheminot.data.TripStopIds.stopIds)
}
inline void TripStopIds::add_stopids(const char* value, size_t size) {
  stopids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:m.cheminot.data.TripStopIds.stopIds)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TripStopIds::stopids() const {
  // @@protoc_insertion_point(field_list:m.cheminot.data.TripStopIds.stopIds)
  return stopids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TripStopIds::mutable_stopids() {
  // @@protoc_insertion_point(field_mutable_list:m.cheminot.data.TripStopIds.stopIds)
  return &stopids_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace cheminot
}  // namespace m

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cheminotBuf_2eproto__INCLUDED
